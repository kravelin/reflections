What happens when you initialize a repository? Why do you need to do it?

- it creates an empty repository in the current directory and sets up git to be able to track the new project

How is the staging area different from the working directory and the repository?
What value do you think it offers?

- the staging area shows files that are in the working directory that will be added to the repository in the next commit but aren't yet part of it
allows you to preview and confirm the files you want to add to the repository before they are added, allowing last minute changes

How can you use the staging area to make sure you have one commit per logical
change?

- you can run git diff and git diff --staged to check what changes are staged and verify it's one logical change

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

- testing experimental code, making variations of the code such as localized language, different game play modes

How do the diagrams help you visualize the branch structure?

- they give a more visual cue to how the commits relate to each other when there are branches

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

- combines the various changes between the branches. shown the way it is because the older commits on both branches are still there

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

- pros: quicker on simple file changes, can catch differences in code that may be overlooked manually
  cons: can't think of any